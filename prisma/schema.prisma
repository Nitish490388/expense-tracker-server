// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GalleryPost {
  id          String         @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime       @default(now())
  media       GalleryMedia[]
}

model GalleryMedia {
  id        String   @id @default(uuid())
  url       String
  type      String   
  thumbnail String?  
  postId    String
  post      GalleryPost @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model ExpenseSession {
  id String @id @default(uuid())
  title  String
  type Type
  settles Boolean @default(false)
  players Player[] @relation("SessionPlayers")
  expenses Expense[]
  contributions  Contribution[]
  refunds   Refunds[]
  createdAt DateTime @default(now())
}

model Player {
  id            String         @id @default(uuid())
  profilePic    String?
  name          String
  email         String         @unique
  password      String?
  isApproved    Boolean        @default(false)
  sessions        ExpenseSession[] @relation("SessionPlayers")
  contributions Contribution[]
  expenses      Expense[]
  refunds       Refunds[]
}

model Refunds {
  id       String      @id @default(uuid())
  amount   Int
  type     Type
  player   Player      @relation(fields: [playerId], references: [id])
  playerId String
  status   Status
  date     DateTime    @default(now())
  sessionId String
  session  ExpenseSession   @relation(fields: [sessionId], references: [id])
}

model Contribution {
  id       String      @id @default(uuid())
  amount   Int
  type     Type       
  player   Player      @relation(fields: [playerId], references: [id])
  playerId String
  status   Status      @default(PENDING)
  date     DateTime    @default(now())
  session  ExpenseSession @relation(fields: [sessionId], references: [id])
  sessionId String
}

model Expense {
  id          String      @id @default(uuid())
  description String
  amount      Int       
  expenseType        Type        
  date        DateTime    @default(now())
  paidBy      Player      @relation(fields: [playerId], references: [id])
  playerId    String

  session     ExpenseSession @relation(fields: [sessionId], references: [id])
  sessionId   String
}

model availableFund {
  id String @id @default(uuid())
  type Type @unique
  amount Int
  updatedAt DateTime @updatedAt
}

enum Type {
  MATCHDAY
  EQUIPMENT
}

enum Status {
  PENDING
  PAID
  DECLINED
}
